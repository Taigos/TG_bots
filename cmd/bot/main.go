package main

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"gopkg.in/telebot.v3"
	//myToken := "7008104386:AAG4_P77JyB2GwZB5sOPfRqOtCJKEPNTl0Q"

	"MyTGbot/internal/app"
	"MyTGbot/internal/config"
)

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const (
	StateMainMenu = iota
	StateWaitingForName
	StateWaitingForNumbers
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
	userStates = make(map[int64]int) // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
)

func oldFunc() {
	myToken := ""
	bot, err := telebot.NewBot(telebot.Settings{
		Token:  myToken,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		log.Fatal(err)
	}

	// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	mainMenu := &telebot.ReplyMarkup{}
	btnAskName := mainMenu.Text("üìù –í–≤–µ—Å—Ç–∏ –∏–º—è")
	btnCalcSum := mainMenu.Text("üßÆ –°—É–º–º–∞ —á–∏—Å–µ–ª")
	btnBack := mainMenu.Text("‚¨Ö –ù–∞–∑–∞–¥")

	mainMenu.Reply(
		mainMenu.Row(btnAskName),
		mainMenu.Row(btnCalcSum),
		mainMenu.Row(btnBack),
	)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	bot.Handle(&btnBack, func(c telebot.Context) error {
		userStates[c.Sender().ID] = StateMainMenu
		return c.Send("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", mainMenu)
	})
	bot.Handle("/start", func(c telebot.Context) error {
		userStates[c.Sender().ID] = StateMainMenu
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenu)
	})

	bot.Handle(&btnAskName, func(c telebot.Context) error {
		userStates[c.Sender().ID] = StateWaitingForName
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
	})

	bot.Handle(&btnCalcSum, func(c telebot.Context) error {
		userStates[c.Sender().ID] = StateWaitingForNumbers
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 10):")
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		userID := c.Sender().ID
		text := c.Text()

		switch userStates[userID] {
		case StateWaitingForName:
			userStates[userID] = StateMainMenu
			return c.Send("–ü—Ä–∏–≤–µ—Ç, "+text+"! üòä", mainMenu)

		case StateWaitingForNumbers:
			nums := strings.Fields(text)
			if len(nums) != 2 {
				return c.Send("–ù—É–∂–Ω–æ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
			}

			a, err1 := strconv.Atoi(nums[0])
			b, err2 := strconv.Atoi(nums[1])
			if err1 != nil || err2 != nil {
				return c.Send("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–∞!")
			}

			userStates[userID] = StateMainMenu
			return c.Send(fmt.Sprintf("–°—É–º–º–∞: %d", a+b), mainMenu)

		default:
			return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenu)
		}
	})

	bot.Start()

	defer func() {
		if r := recover(); r != nil {
			log.Printf("–ü–∞–Ω–∏–∫–∞: %v", r)
			time.Sleep(10 * time.Second) // –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫—É
		}
	}()
}
func main() {
	cfg := config.Load()
	app.Run(cfg)

	oldFunc()
}
